#
# Written 2011 by David Herrmann
# Dedicated to the Public Domain
#

#
# Configuration variables
# Overwrite these variables on the command line like: make DEBUG=1
#

#
# The parent makefile should set:
#  LIBNAME: Name of the library and target object (eg., libcstr)
#  C_SRC: List of C sources in ./src (eg., cstr.c bla.c you.c)
#  C_INC: List of C headers in ./include (eg., libcstr.h internal.h hi.h)
#  INC_I: List of C headers in ./include to be installed (eg., libcstr.h)
#  MAN_I: List of man3 pages in ./man3 to be installed (eg., cstr.3 help.3)
#  DEPENDS: List of file dependencies of all sources (eg., ../inc.makefile)
#  LIBS: Libraries that are linked to LIBNAME (eg., cstr m glib)
#  CLEAN: Additional files to be cleaned
#

# Name of the library and of the resulting object
ifeq ($(LIBNAME),)
  $(error LIBNAME is not specified)
endif

# System we are building for. One of: linux, macosx, windows
SYSTEM=linux

# Enable debugging compiler flags (set to 0 or 1)
DEBUG=0

# Default prefix for installs
PREFIX=/usr

# Default rule
default: build

#
# Autogenerated variables
#

# Phony targets
PHONY+=
TARGET=$(LIBNAME).so

# C objects and flags
CC=
FLAGS_C=
INC_C=$(addprefix include/, $(C_INC))
SRC_C=$(addprefix src/, $(C_SRC))
OBJ_C=$(addsuffix .o, $(basename $(SRC_C)))

# Linker objects and flags
LD=
FLAGS_L=
OBJ_L=$(OBJ_C)

# System dependent variables
ifeq ($(SYSTEM),linux)
  TARGET=$(LIBNAME).so
  CC=gcc -o
  FLAGS_C=-c -Wall -fPIC -Iinclude
  LD=gcc -o
  FLAGS_L=-shared -Wall $(addprefix -l, $(LIBS))
else ifeq ($(SYSTEM),macosx)
  TARGET=$(LIBNAME).dylib
  CC=gcc -o
  FLAGS_C=-c -Wall -fPIC -Iinclude -fnested-functions
  LD=gcc -o
  FLAGS_L=-dynamiclib -Wall $(addprefix -l, $(LIBS))
else
error:
	@echo "Error: Invalid target system"
endif

# Debug flags
ifeq ($(DEBUG),1)
  FLAGS_C+=-O0 -g
else
  FLAGS_C+=-O2
endif

#
# System dependent targets
#

PHONY+=is_root is_root_linux is_root_macosx

is_root: is_root_$(SYSTEM)
is_root_linux:
	@if test ! x`whoami` = "xroot" ; then \
 echo "Warning: You are not root" ; fi
is_root_macosx:
	@if test ! x`whoami` = "xroot" ; then \
 echo "Warning: You are not root" ; fi


#
# Default targets
# These are the default targets that are used primarily from the command line.
# The targets are:
#	default: The default target which equals "build"
#	help: Show help
#	build: Builds all objects
#	clean: Removes all generated objects
#	install: Installs all objects into the system
#	uninstall: Uninstalls all objects from the system
#

PHONY+=default help build build_pre build_do clean clean_pre clean_do
PHONY+=install install_pre install_do uninstall uninstall_pre uninstall_do

help:
	@echo "Makefile for $(LIBNAME)"
	@echo "  Written 2011 by David Herrmann"
	@echo "  Dedicated to the Public Domain"
	@echo ""
	@echo "Use this makefile to build and install $(LIBNAME)."
	@echo "The following targets are available:"
	@echo "  build: Build $(LIBNAME)"
	@echo "  clean: Clean directories"
	@echo "  install: Install into system"
	@echo "  uninstall: Uninstall from system"

build: build_pre build_do
	@echo "Building done"

build_pre:
	@echo "Building $(LIBNAME)"

build_do: $(TARGET)

clean: clean_pre clean_do
	@echo "Cleaning done"

clean_pre:
	@echo "Cleaning directories"

clean_do:
	@rm -fv $(OBJ_C) $(TARGET) $(CLEAN)

install: build install_pre is_root install_do
	@echo "Installing done"

install_pre:
	@echo "Installing $(LIBNAME)"

install_do:
ifneq ($(INC_I),)
	@install -v $(addprefix include/, $(INC_I)) $(PREFIX)/include
endif
ifneq ($(MAN_I),)
	@install -v $(addprefix man3/, $(MAN_I)) $(PREFIX)/share/man/man3
endif
	@install -v $(TARGET) $(PREFIX)/lib

uninstall: uninstall_pre uninstall_do
	@echo "Uninstalling done"

uninstall_pre:
	@echo "Uninstalling $(LIBNAME)"

uninstall_do:
ifneq ($(INC_I),)
	@rm -fv $(addprefix $(PREFIX)/include/, $(INC_I))
endif
ifneq ($(MAN_I),)
	@rm -fv $(addprefix $(PREFIX)/share/man/man3/, $(MAN_I))
endif
	@rm -fv $(addprefix $(PREFIX)/lib/, $(TARGET))

#
# Compilation and Linking rules
# Generic compilation and linking rules. This also contains some generic
# dependencies. For instance all files that are linked depend on this Makefile.
# This forces make to recompile all files when the makefile is changed.
#

ifneq ($(OBJ_L),)
$(OBJ_L): Makefile $(INC_C) $(DEPENDS)
endif

src/%.o: src/%.c
	$(CC) $@ $(FLAGS_C) $<

ifneq ($(OBJ_L),)
$(TARGET): $(OBJ_L)
	$(LD) $@ $(FLAGS_L) $(OBJ_L)
endif

.PHONY: $(PHONY)
