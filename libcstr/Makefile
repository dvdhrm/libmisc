#
# Written 2011 by David Herrmann
# Dedicated to the Public Domain
#

#
# Configuration variables
# Adjust the variables to your project and target system.
#

# Name of the library and of the resulting object
LIBNAME=libcstr

# System we are building for. One of: linux, macosx, windows
SYSTEM=linux

# Enable debugging compiler flags (set to 0 or 1)
DEBUG=0

# List of all C-sources inside ./src/
C_SRC=cstr.c

# List of all C-headers inside ./include/
C_INC=libcstr.h

# List of include files inside ./include/ that should be installed system wide
INC_I=libcstr.h

# List of manpages inside ./man3/ that should be installed system wide
MAN_I=$(notdir $(wildcard man3/*.3))

# Default prefix for installs
PREFIX=/usr

# Default rule
default: build

#
# Project specific rules
# Build rules for this project only. This includes some examples and other
# stuff like special dependencies.
#

#
# Autogenerated variables
#

# Phony targets
PHONY=
TARGET=$(LIBNAME).so

# C objects and flags
CC=
FLAGS_C=
INC_C=$(addprefix include/, $(C_INC))
SRC_C=$(addprefix src/, $(C_SRC))
OBJ_C=$(addsuffix .o, $(basename $(SRC_C)))

# Linker objects and flags
LD=
FLAGS_L=
OBJ_L=$(OBJ_C)

# System dependent variables
ifeq ($(SYSTEM),linux)
  TARGET=$(LIBNAME).so
  CC=gcc -o
  FLAGS_C=-c -Wall -fPIC -Iinclude
  LD=gcc -o
  FLAGS_L=-shared -Wall

PHONY+=is_root
is_root:
	@if test ! x`whoami` = "xroot" ; then \
 echo "Warning: You are not root" ; fi

else ifeq ($(SYSTEM),macosx)
  TARGET=$(LIBNAME).dylib
  CC=gcc -o
  FLAGS_C=-c -Wall -fPIC -Iinclude
  LD=gcc -o
  FLAGS_L=-dynamiclib -Wall

PHONY+=is_root
is_root:
	@if test ! x`whoami` = "xroot" ; then \
 echo "Warning: You are not root" ; fi

else ifeq ($(SYSTEM),windows)
  TARGET=$(LIBNAME).dll
  CC=TODO
  FLAGS_C=-TODO
  LD=TODO
  FLAGS_L=-TODO

PHONY+=is_root
is_root:

else
error:
	@echo "Error: Invalid target system"
endif

# Debug flags
ifeq ($(DEBUG),1)
  FLAGS_C+=-O0 -g
else
  FLAGS_C+=-O2
endif

#
# Default targets
# These are the default targets that are used primarily from the command line.
# The targets are:
#	default: The default target which equals "build"
#	help: Show help
#	build: Builds all objects
#	clean: Removes all generated objects
#	install: Installs all objects into the system
#	uninstall: Uninstalls all objects from the system
#

PHONY+=default help build build_pre build_do clean clean_pre clean_do
PHONY+=install install_pre install_do uninstall uninstall_pre uninstall_do

help:
	@echo "Makefile for $(LIBNAME)"
	@echo "  Written 2011 by David Herrmann"
	@echo "  Dedicated to the Public Domain"
	@echo ""
	@echo "Use this makefile to build and install $(LIBNAME)."
	@echo "The following targets are available:"
	@echo "  build: Build $(LIBNAME)"
	@echo "  clean: Clean directories"
	@echo "  install: Install into system"
	@echo "  uninstall: Uninstall from system"

build: build_pre build_do
	@echo "Building done"

build_pre:
	@echo "Building $(LIBNAME)"

build_do: $(TARGET)

clean: clean_pre clean_do
	@echo "Cleaning done"

clean_pre:
	@echo "Cleaning directories"

clean_do:
	@rm -fv $(OBJ_C) $(TARGET)

install: build install_pre is_root install_do
	@echo "Installing done"

install_pre:
	@echo "Installing $(LIBNAME)"

install_do:
	@install -v -t $(PREFIX)/include $(addprefix include/, $(INC_I))
	@install -v -t $(PREFIX)/lib $(TARGET)
	@install -v -t $(PREFIX)/share/man/man3 $(addprefix man3/, $(MAN_I))

uninstall: uninstall_pre uninstall_do
	@echo "Uninstalling done"

uninstall_pre:
	@echo "Uninstalling $(LIBNAME)"

uninstall_do:
	@rm -fv $(addprefix $(PREFIX)/include/, $(INC_I))
	@rm -fv $(addprefix $(PREFIX)/lib/, $(TARGET))
	@rm -fv $(addprefix $(PREFIX)/share/man/man3/, $(MAN_I))

#
# Compilation and Linking rules
# Generic compilation and linking rules. This also contains some generic
# dependencies. For instance all files that are linked depend on this Makefile.
# This forces make to recompile all files when the makefile is changed.
#

$(OBJ_L): Makefile $(INC_C)

src/%.o: src/%.c
	$(CC) $@ $(FLAGS_C) $<

$(TARGET): $(OBJ_C)
	$(LD) $@ $(FLAGS_L) $(OBJ_C)

.PHONY: $(PHONY)
