.\"
.\" Written 2011 by David Herrmann
.\" Dedicated to the Public Domain
.\"
.TH "CSTR" 3 "August 2011" "David Herrmann" "CSTR Library"
.SH NAME
cstr \- Static array and c-string library

.SH SYNOPSIS
.B #include <libcstr.h>

typedef
.B struct cstr
{
.br
	size_t
.B len;
.br
	ssize_t
.B size;
.br
	uint8_t
.B *buf;
.br
}
.B cstr;

#define
.B CSTR_LEN(str)
((str)->len)
.br
#define
.B CSTR_SIZE(str)
(abs((str)->size))
.br
#define
.B CSTR_CHAR(str)
((char*)((str)->buf))
.br
#define
.B CSTR_VOID(str)
((void*)((str)->buf))
.br
#define
.B CSTR_UINT8(str)
((uint8_t*)((str)->buf))

.RB "cstr *" "cstr_alloc" "(size_t len, ssize_t size, void *buf);"
.br
.RB "void " "cstr_clear" "(cstr *str);"
.br
.RB "void " "cstr_free" "(cstr *str);"
.br
.RB "bool " "cstr_fit" "(cstr *str, size_t len);"
.br
bool cstr_cfit(cstr *str, size_t len);
.br
.RB "cstr *" "cstr_new" "(size_t len);"
.br
cstr *cstr_cnew(size_t len);
.br
.RB "cstr *" "cstr_dup" "(const cstr *str);"
.br
cstr *cstr_cdup(const cstr *str);
.br
.RB "bool " "cstr_cat" "(cstr *str, const cstr *cat);"
.br
bool cstr_ccat(cstr *str, const cstr *cat);

.SH DESCRIPTION
The
.B CSTR Library
helps managing static arrays and strings in C. Although not limited to
char-arrays, it is most commonly used for c-strings and hence its name. A cstr
object can be created on the heap or stack. Its internal string buffer can be
dynamically resized by the library or use a statically assigned buffer without
any overhead.

Memory management is handled by the library. Functions that may fail due to
memory allocation failure return false/NULL on error. See each function for
further details.
The library uses standard
.B malloc(), realloc()
and
.B free()
functions for memory management.

A cstr object consists of the array-length, the array-size and the actual array.
The array-length is the length of the array. The array-size is the actually
allocated size of the array. It is always either greater than or equal to the
array-length. If the buffer is static and not allocated by the library, then the
array-size is negative and the buffer will not be freed by the library. Instead,
on reallocation, the buffer is dropped and a new buffer is allocated.
Size 0 is always a static buffer with only a terminating zero character.
Since many strings are modified during runtime, a cstr buffer, when allocated,
has always twice the size as required. This allows to modify the string without
the need of reallocating the buffer. However, often a string is constant and
does not need to be modified. Therefore, constant strings are supported. A
constant string can be used the same way as other strings but its array-size is
always the same as its array-length. So this type does not keep a buffer twice
its size.

Many functions that operate on a strings need to change the string size. This is
always done dynamically if the buffer of the string is not sufficient. If a new
buffer is allocated, it is always twice the size as needed. The buffer never
shrinks, though.
Functions that may reallocate a string always return a boolean indicating
success or failure. The string object is always valid after the function call,
but if the function returned false, then the operation did not modify the
string at all.

Most functions operate on many strings but only one string is the destination of
the operation. If that string is
considered constant and, hence, should not keep a buffer, then the function's
name is prefixed with a
.B c
(for instance cstr_dup() and cstr_cdup(): The latter one will duplicate the
given string with a buffer of the exact string length. The first one will
duplicate the string with a buffer twice the size of the string length)

For backwards compatibility every cstr object's buffer is terminated with a
binary zero-character like classic C-string constants. This character is not
considered part of the string and hence not included in string-length or
string-size. But you can always be sure that cstr->buf[cstr->len] is 0. This
allows to print this string with classic printf()-style functions. However, if
your cstr object contains multiple binary zero-characters inside the string,
then the string will be truncated in the output as printf() is not compatible
with such strings.
If you manage or initialize the buffer yourself and pass it to a new cstr
object, then you must always make the buffer 1 byte bigger than requested. That
is, your "size" argument is 1 smaller than the actual size. Otherwise, the
library won't be able to write the 0 character.
The 0 character is not added to the size argument, as it is just a
backwards-compatibility helper. New applications should not rely on anything
like it when handling cstr objects, except if they pass the cstr object as
classic C-String to other functions.

New strings almost always should be allocated either with
.B cstr_new()
or
.B cstr_dup().
Then you may modify the strings and when you are done, you should destroy them
with
.B cstr_free().

To access the raw data, you should directly access the structure. Use
.B cstr->len
to get the string length and
.B cstr->buf
to get a pointer to the buffer. Some convenience macros are available that also
perform the required casts. See
.B CSTR_LEN, CSTR_VOID, CSTR_CHAR, CSTR_UINT8.
They return
.B cstr->buf
but also convert it to the requested pointer type. Feel free to modify these
values, too. However, the cstr functions are optimized for most string
modifications so it's better to use them.

It is also possible to allocate cstr objects on the stack or as lvalue. See
CSTR_LVALUE for the documentation. This allows to call functions, that
accept cstr-objects like cstr_some_func(CSTR_CS("some string"));

.SH FILES
.I /usr/include/libcstr.h
.RS
The main header file.
.RE
.I /usr/lib/libcstr.so
.RS
The compiled shared library.

.SH BUGS
The namespace "cstr" might clash with other header files.

.SH AUTHOR
David Herrmann <dh.herrmann@googlemail.com>
.SH "SEE ALSO"
.BR cstr_alloc (3),
.BR cstr_free (3),
.BR cstr_fit (3),
.BR cstr_new (3),
.BR cstr_dup (3),
.BR cstr_cat (3),
