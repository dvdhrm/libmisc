.\"
.\" Written 2011 by David Herrmann
.\" Dedicated to the Public Domain
.\"
.TH "cstr_cat, cstr_ccat, cstr_strcat, cstr_strccat" 3 "August 2011" "David Herrmann" "CSTR Library"
.SH NAME
cstr_cat, cstr_ccat, cstr_strcat, cstr_strccat \- Concatenate two cstr obects

.SH SYNOPSIS
.B #include <libcstr.h>

.BI "bool cstr_cat(cstr *" str ", const cstr *" cat ");"
.br
.BI "bool cstr_cdup(cstr *" str ", const cstr *" cat ");"
.br
.BI "bool cstr_strcat(cstr *" str ", size_t " len ", const void *" cat ");"
.br
.BI "bool cstr_strccat(cstr *" str ", size_t " len ", const void *" cat ");"

.SH DESCRIPTION
.B cstr_cat
puts
.I cat
at the end of
.I str.
If
.I str
is not big enough, the object is reallocated. This function returns true if the
operation succeeded and false if memory reallocation failed. However,
.I str
is valid regardless what is returned, but the operation has only effect if true
is returned.
.B cstr_strcat
does the same but takes a regular C-string as input.

.B cstr_ccat
and
.B cstr_strccat
do the same but create constant strings.

.SH AUTHOR
David Herrmann <dh.herrmann@googlemail.com>
.SH "SEE ALSO"
.BR cstr (3),
.BR cstr_alloc (3),
.BR cstr_free (3),
.BR cstr_fit (3),
.BR cstr_new (3),
.BR cstr_dup (3),
.BR CSTR_LEN (3),
.BR CSTR_VOID (3)
